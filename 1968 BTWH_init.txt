campaignTrail_temp.election_json = [
    {
        "model": "campaign_trail.election",
        "pk": 20,
        "fields": {
            "year": 2016,
            "display_year": "1968 BTWH",
            "summary": "Put election description here. You can use html tags here too. EXAMPLE TEXT",
            "image_url": "https://i.postimg.cc/kgdLGj5F/par80905-teaser-story-big.jpg",
            "winning_electoral_vote_number": 270,
            "advisor_url": "https://gcdnb.pbrd.co/images/QVXKe4YvEgL2.jpg?o=1",
            "recommended_reading": "<ul>\n<li><a href=https://www.chicagotribune.com/opinion/editorials/ct-edit-chicago-tribune-biden-endorsement-20200925-lnyxsb5qvrftnjjmj3rnzj33jy-story.html>Our Case For Joe Biden</a></li>\n<li><a href=https://nationalinterest.org/feature/case-trump-166808>The Case For Trump</a></li>\n<li><a href=https://www.npr.org/2020/11/18/935730100/how-biden-won-ramping-up-the-base-and-expanding-margins-in-the-suburbs>How Biden Won: Ramping Up The Base And Expanding Margins In The Suburbs</a></li>\n<li><a href=https://www.prospectmagazine.co.uk/politics/donald-trump-joe-biden-us-election-almost-win-votes-concede>Why Did Trump Almost Win?</a></li>\n<li><a href=https://www.hoover.org/research/no-evidence-voter-fraud-guide-statistical-claims-about-2020-election>No Evidence For Voter Fraud: A Guide To Statistical Claims About The 2020 Election</a></li>\n</ul>",
            "has_visits": 1,
            "no_electoral_majority_image": "../static/images/2012-no-majority.jpg"
        }
    }
]

campaignTrail_temp.temp_election_list = [
    {
        "id": 20,
        "year": 2016,
        "is_premium": 0,
        "display_year": "1968 BTWH"
    }
]

campaignTrail_temp.credits = "Dr. Victor Frankenstein"

campaignTrail_temp.global_parameter_json = [
    {
        "model": "campaign_trail.global_parameter",
        "pk": 1,
        "fields": {
            "vote_variable": 1.125,
            "max_swing": 0.12,
            "start_point": 0.94,
            "candidate_issue_weight": 10,
            "running_mate_issue_weight": 3,
            "issue_stance_1_max": -0.71,
            "issue_stance_2_max": -0.3,
            "issue_stance_3_max": -0.125,
            "issue_stance_4_max": 0.125,
            "issue_stance_5_max": 0.3,
            "issue_stance_6_max": 0.71,
            "global_variance": 0.01,
            "state_variance": 0.005,
            "question_count": 35,
            "default_map_color_hex": "#C9C9C9",
            "no_state_map_color_hex": "#999999"
        }
    }
]

campaignTrail_temp.candidate_json = [
    {
        "model": "campaign_trail.candidate",
        "pk": 201,
        "fields": {
            "first_name": "Eugene",
            "last_name": "McCarthy",
            "election": 20,
            "party": "Progressive",
            "state": "Minnesota",
            "priority": 1,
            "description": "<p>Put description here EXAMPLE TEXT</p>",
            "color_hex": "#758c34",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://i.postimg.cc/j5ZtRHX4/IMG-7351-1.png",
            "electoral_victory_message": "EXAMPLE TEXT This guy wins!",
            "electoral_loss_message": "EXAMPLE TEXT This guy loses!",
            "no_electoral_majority_message": "EXAMPLE TEXT We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 202,
        "fields": {
            "first_name": "George",
            "last_name": "Wallace",
            "election": 20,
            "party": "Democratic",
            "state": "Nebraska",
            "priority": 1,
            "description": "<p>Put description here</p> EXAMPLE TEXT",
            "color_hex": "#137c78",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://gcdnb.pbrd.co/images/lIxS0EpiqzIu.jpg?o=1",
            "electoral_victory_message": "This guy wins! EXAMPLE TEXT",
            "electoral_loss_message": "This guy loses! EXAMPLE TEXT",
            "no_electoral_majority_message": "We all win? EXAMPLE TEXT",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 203,
        "fields": {
            "first_name": "Gerald",
            "last_name": "Ford",
            "election": 20,
            "party": "Republican",
            "state": "Nebraska",
            "priority": 1,
            "description": "<p>Put description here EXAMPLE TEXT</p>",
            "color_hex": "#d24933",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://gcdnb.pbrd.co/images/pP19IP8tMTFn.jpg?o=1",
            "electoral_victory_message": "This guy wins! EXAMPLE TEXT",
            "electoral_loss_message": "This guy loses! EXAMPLE TEXT",
            "no_electoral_majority_message": "We all win? EXAMPLE TEXT",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 204,
        "fields": {
            "first_name": "",
            "last_name": "Cleaver/Gregory",
            "election": 20,
            "party": "Peace and Freedom",
            "state": "California",
            "priority": 1,
            "description": "<p>Put description here EXAMPLE TEXT</p>",
            "color_hex": "#BC252F",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/candidateexample.png",
            "electoral_victory_message": "This guy wins! EXAMPLE TEXT",
            "electoral_loss_message": "This guy loses! EXAMPLE TEXT",
            "no_electoral_majority_message": "We all win? EXAMPLE TEXT",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    }
]

campaignTrail_temp.running_mate_json = []

campaignTrail_temp.opponents_default_json = [
    {
        "election": 20,
        "candidates": [
            201,
            202,
            203,
            204
        ]
    }
]

campaignTrail_temp.opponents_weighted_json = [
    {
        "election": 20,
        "candidates": [
            201,
            202,
            203,
            204
        ]
    }
]

jet_data = {
    "headerColor": "#53482f",
    "windowColor": "#53482f",
    "containerColor": "#342d1d",
    "innerWindowColor": "#e0d9c8",
    "bannerImageUrl": "https://gcdnb.pbrd.co/images/d1bAtcA9Mml1.png?o=1",
    "backgroundImageUrl": "https://coolbackgrounds.io/images/backgrounds/white/pure-white-background-85a2a7fd.jpg",
    "endingTextColor": "#000000",
    "customQuote": "We have seen our nation judged in the balance of history and been found wanting. - MLK",
    "gameTitle": "BRING THE WAR HOME"
}

//#startcode


corrr = '\n              <h2>BRING THE WAR HOME </h2></font><font id="georgia" size="4" color="white"><em>“We have seen our nation judged in the balance of history and been found wanting” - MLK</em></font>\n            ';


nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#53482f";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#53482f";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;

$(".container")[0].style.backgroundColor = "#342d1d";

document.getElementById("header").src = "https://gcdnb.pbrd.co/images/d1bAtcA9Mml1.png?o=1";

document.body.background = "https://i.ibb.co/mB5xkKH/bpp.png";

document.head.innerHTML += "<style>#results_container {color:#000000;} .inner_window_w_desc {background-color:#e0d9c8!important;}</style>";




RecReading=true
  
  // Select the node that will be observed for mutations
  const windowsAdvisorTargetNode = document.getElementById("game_window");
  
  // Options for the observer (which mutations to observe)
  const windowsAdvisorConfig = { attributes: true, childList: true, subtree: true };
  
  // Callback function to execute when mutations are observed
  const callback = (mutationList, observer) => {
      visitWindow = document.getElementsByClassName("overlay_window")[0];
  
      if(visitWindow == null || visitWindow.classList.contains("done")) {
          return;
      }
      visitWindow.classList.add("done");
      visitWindow.classList.add("window");
      let titleBar = visitWindow.querySelector("h3");
      titleBar.classList.add("title-bar");
      titleBar.classList.add("title-bar-text")
      titleBar.style.paddingLeft = "3px";
  };
  
  class Song {
    constructor(title, artist, coverLink, audioLink) {
      this.title = title;
      this.artist = artist;
      this.coverLink = coverLink;
      this.audioLink = audioLink;
    }
    getTitle() {
      return this.title;
    }
  
    getArtist() {
      return this.artist;
    }
  
    getCoverLink() {
      return this.coverLink;
    }
  
    getAudioLink() {
      return this.audioLink;
    }
  }
  
  class Playlist {
    constructor() {
      this.songs = [];
      this.currentSongIndex = 0;
    }
  
    addSong(song) {
      this.songs.push(song);
    }
  
    getCurrentSong() {
      return this.songs[this.currentSongIndex];
    }
  
    playNext() {
      this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
    }
  
    playPrevious() {
      this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
    }
  }
  window.Playlist=Playlist
  window.Song=Song
  
  function changePlaylist(newPlaylist) {
    playlist = newPlaylist;
    playlist.currentSongIndex = 0;
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  }
  window.changePlaylist=changePlaylist
  
  function updateUI(playlist) {
      const currentSong = playlist.getCurrentSong();
      var player = document.getElementById("player");
      player.querySelector("#cover").src = currentSong.getCoverLink();
      player.querySelector("#title").textContent = currentSong.getTitle();
      player.querySelector("#artist").textContent = currentSong.getArtist();
  }
  
  window.updateUI=updateUI
  
  
  function setupMusicPlayer() {
    playlist = new Playlist();
  
  
    const song1 = new Song(
      "If There Is a Hell Below, We're All Going to Go",
      "Curtis Mayfield",
      "https://i.scdn.co/image/ab67616d0000b273775a6bee6c704ec29aec00f4",
      "https://audio.jukehost.co.uk/fwHnrGItjlUAGToJQjsTXsqHAWwLeVqg"
    );
    
    const song2 = new Song(
      "American Idiot",
      "Green Day",
      "https://upload.wikimedia.org/wikipedia/en/thumb/e/ed/Green_Day_-_American_Idiot_album_cover.png/220px-Green_Day_-_American_Idiot_album_cover.png",
      "https://audio.jukehost.co.uk/37xW79v6txBYeEgXI3jzCRHS5yGnHJFl"
    );
  
    const song3 = new Song(
      "America's Army™",
      "Propagandhi",
      "https://www.aversionline.com/assets/images/cache/propagandhi-potemkin-city-limits-cover_-_28de80_-_e82f5d0e6510d9fbbcd89617445200bc31aaf6c6.jpg",
      "https://audio.jukehost.co.uk/WppjtiBwaIWyswZYGF5pbMNbF7f9mv7H"
    );
  
    const song4 = new Song(
      "Prayer of the Refugee",
      "Rise Against",
      "https://upload.wikimedia.org/wikipedia/en/7/73/Rise_Against_-_The_Sufferer_%26_The_Witness.jpg",
      "https://audio.jukehost.co.uk/wZbLTTDel7YTrEqIcfPeQFHCGcsr1WrP"
    );
  
    const song5 = new Song(
      "Beast",
      "Nico Vega",
      "https://i1.sndcdn.com/artworks-2sg1kWr6e0wp-0-t500x500.jpg",
      "https://audio.jukehost.co.uk/HrP06WgAWji67ytIBRrSAqGo5adsr39J"
    );
  
    const song6 = new Song(
      "B.Y.O.B.",
      "System of a Down",
      "https://upload.wikimedia.org/wikipedia/en/0/02/Mezmerize-LP.jpg",
      "https://audio.jukehost.co.uk/TDnRpwxp5oGXmhaO0HXt6Xti2Wr3JQ2t"
    );
  
    const song7 = new Song(
      "Mosh",
      "Eminem",
      "https://upload.wikimedia.org/wikipedia/en/b/b4/Encore_%28Eminem_album%29_coverart.jpg",
      "https://audio.jukehost.co.uk/1ZqS3DttoOnMtFQ8VFTUzrXouWNlRr9V"
    );
  
    playlist.addSong(song1);
    playlist.addSong(song2);
    playlist.addSong(song3);
    playlist.addSong(song4);
    playlist.addSong(song5);
    playlist.addSong(song6);
    playlist.addSong(song7);
  
    const playerContainer = document.createElement("div");
    playerContainer.id = "player";
  
   const displayBox = document.createElement("div");
  displayBox.id = "display-box";
  
  const coverElement = document.createElement("img");
  coverElement.id = "cover";
  displayBox.appendChild(coverElement);
  
  const infoContainer = document.createElement("div");
  infoContainer.id = "info-container";
  infoContainer.style.backgroundImage = "url('https://i.ibb.co/M73CBjW/overlay.png')";
  infoContainer.style.backgroundSize = "cover"; // Optional: adjust based on your needs
  infoContainer.style.color = "white"; // Set text color to white
  
  const songInfo = document.createElement("div");
  songInfo.id = "song-info";
  
  const titleElement = document.createElement("h3");
  titleElement.id = "title";
  titleElement.style.fontWeight = 'normal'; // Make it normal as per previous request
  songInfo.appendChild(titleElement);
  
  const artistElement = document.createElement("p");
  artistElement.id = "artist";
  songInfo.appendChild(artistElement);
  
  infoContainer.appendChild(songInfo);
  displayBox.appendChild(infoContainer);
  
  playerContainer.appendChild(displayBox);
  
  const controlsContainer = document.createElement("div");
  controlsContainer.id = "controls-container";
  
  const controls = document.createElement("div");
  controls.id = "controls";
  
  const prevButton = document.createElement("img");
  prevButton.id = "prevButton";
  prevButton.src = "https://i.ibb.co/gMyNq5T/back.png";
  prevButton.alt = "Previous";
  controls.appendChild(prevButton);
  
  const playPauseButton = document.createElement("img");
  playPauseButton.id = "playPauseButton";
  playPauseButton.src = "https://i.ibb.co/5TwzzWN/pause.png"; // Set the default play image
  playPauseButton.alt = "Play/Pause";
  controls.appendChild(playPauseButton);
  
  const nextButton = document.createElement("img");
  nextButton.id = "nextButton";
  nextButton.src = "https://i.ibb.co/5Rx0cYt/forward.png";
  nextButton.alt = "Next";
  controls.appendChild(nextButton);
  
  controlsContainer.appendChild(controls);
  
  playPauseButton.addEventListener("click", function () {
    const audio = document.getElementById("audio");
    if (audio.paused) {
      audio.play();
      playPauseButton.src = "https://i.ibb.co/5TwzzWN/pause.png"; // Set the pause image
    } else {
      audio.pause();
      playPauseButton.src = "https://i.ibb.co/G5TsX12/play.png"; // Set the play image
    }
  });
  
  nextButton.addEventListener("click", function () {
    playlist.playNext();
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  });
  
  prevButton.addEventListener("click", function () {
    playlist.playPrevious();
    updateUI(playlist);
    const audio = document.getElementById("audio");
    audio.src = playlist.getCurrentSong().audioLink;
    audio.play();
  });
  
    const progressBarContainer = document.createElement("div");
    progressBarContainer.id = "progress-bar-container";
  
    const progressBar = document.createElement("progress");
    progressBar.type = "range";
    progressBar.id = "progress-bar";
    progressBar.value = "0";
    progressBar.max = "130";
    progressBar.style.marginLeft = "0%";
  
  
    progressBarContainer.appendChild(progressBar);
    controlsContainer.appendChild(progressBarContainer);
    playerContainer.appendChild(controlsContainer);
  
   const volumeContainer = document.createElement("div");
    volumeContainer.id = "volume-container";
  
  const volumeLabel = document.createElement("img");
  volumeLabel.src = "https://i.ibb.co/9Gkg5Qp/volume.png";
  volumeLabel.alt = "Volume";
  volumeContainer.appendChild(volumeLabel);
  
    const volumeSliderContainer = document.createElement("div");
    volumeSliderContainer.classList.add("is-vertical");
    volumeSliderContainer.style.marginLeft = "-20%";
    volumeSliderContainer.style.height = "126px";
  
    const volumeSlider = document.createElement("input");
    volumeSlider.type = "range";
    volumeSlider.id = "volumeSlider";
    volumeSlider.min = 0;
    volumeSlider.max = 9;
    volumeSlider.step = 1;
    volumeSlider.value = 1; // Initial volume
  
    volumeSliderContainer.appendChild(volumeSlider);
  
    const volumeDisplay = document.createElement("span");
    volumeDisplay.id = "volume-display";
    volumeDisplay.style.fontWeight = 'bold'; 
    volumeDisplay.style.display = 'none';
    volumeDisplay.textContent = "1";
  
    volumeContainer.appendChild(volumeSliderContainer);
    volumeContainer.appendChild(volumeDisplay);
  
    playerContainer.appendChild(volumeContainer);
  
    gameWindow_player.insertAdjacentElement("afterend", playerContainer);
  
  
    function updateProgressBar() {
      const audio = document.getElementById("audio");
      const progress = (audio.currentTime / audio.duration) * 100;
      try{progressBar.value = progress}
    catch{}
    }
  
   
    progressBar.addEventListener("input", function () {
      const audio = document.getElementById("audio");
      const seekTime = (progressBar.value / 100) * audio.duration;
      audio.currentTime = seekTime;
    });
  
    const audio = document.createElement("audio");
    audio.id = "audio";
    audio.src = playlist.getCurrentSong().audioLink;
    audio.volume = 1/9;
  
    audio.addEventListener("timeupdate", updateProgressBar);
    audio.addEventListener("ended", function () {
      // Play the next song when the current song ends
      playlist.playNext();
      updateUI(playlist);
      audio.src = playlist.getCurrentSong().audioLink;
      audio.play();
    });
  
      let currentVolume = 1; // Initial volume
  
    volumeSlider.addEventListener("input", function () {
      currentVolume = parseInt(volumeSlider.value, 10);
      updateVolumeDisplay();
      updateAudioVolume();
    });
  
    function updateVolumeDisplay() {
      volumeDisplay.textContent = currentVolume;
    }
  
     function updateAudioVolume() {
      const audio = document.getElementById("audio");
      audio.volume = currentVolume / 9; // Set volume between 0 and 1
    }
  
    document.body.appendChild(audio);
    audio.play();
  
    // Update the UI when the page loads
    updateUI(playlist);
  }
  
  const style = document.createElement("style");
  style.textContent = `
  #player {
      border: 3px solid #241f14; /* Add your desired border style */
      display: flex;
      flex-direction: row;
    height:191px;
      background-Image: url("https://i.ibb.co/GkP7XsH/background.png");
    }
  
    #display-box {
      display: flex;
      align-items: center;
      width: 50%;
    }
  
    #cover {
      width: 176px;
    height:176px;
    }
  
    #info-container {
      display: flex;
      flex-direction: row;
      height:178px;
    width:127px;
    margin-top: 3px;
    }
  
    #song-info {
      width: 100%;
    padding:5px;
    }
  
    #controls-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 10px;
      width:100%;
    padding-top:15px;
  
    }
    .is-vertical #volumeSlider {
    width: 90px;
  }
  
    #controls {
      display: flex;
      flex-direction: row;
      justify-content: center;
      width: 80%;
    }
  
    #progress-bar-container {
      width: 100%;
    }
  
    #progress-bar {
      width: 80%;
      margin: auto;
      display: flex;
      margin-Top: 20px;
    }
    
  `;
  
  document.head.appendChild(style);
  
  const gameWindow_player = document.getElementById("game_window");
  //use this function directly or put it in an event listener to start the music on the press of a certain button
  setupMusicPlayer();
  


//#endcode
